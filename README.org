#+TITLE: Repos

A tool that for getting a report on git repos listed in a =~/.config/repos.yml= file.

* Obtain
** MacOS

#+begin_src shell
brew tap philippecarphin/repos
brew install --build-from-source repos
#+end_src

The autocomplete scripts will be in =/usr/local/completions= or in
=/opt/homebrew/completions= depending on what kind of Mac you have.

So something like =source /usr/local/completions/repos_completion.zsh= could go
in your =~/.zshrc= (there are =.bash= and =.fish= completion files also).  On
Macs, you would put =source /usr/local/completions/repos_completion.bash= inside
the =~/.bash_profile=.

** Linux
*** Debian

#+begin_src 
git clone https://gitlab.com/philippecarphin/repos repos-0.1.0
cd repos
make
make deb
cd ..
sudo dpkg -i repos_0.1.0*.deb
#+end_src

I don't know how to have the completion scripts be "installed" so that they are
sourced automatically without having to tell the user to add stuff in their
=.basrc=.

** Manual

#+begin_src 
git clone https://gitlab.com/philippecarphin/repos
cd repos
make
make PREFIX=$PREFIX install
#+end_src

You want to have =$PREFIX/bin= in your path and you want to source
=$PREFIX/etc/repos_completion.X= in the startup file of your shell.

The content of =$PREFIX= after =make PREFIX=$PREFIX install= looks like:
#+begin_example
.
└── usr
    ├── bin
    │   ├── git-recent
    │   └── repos
    ├── etc
    │   ├── repos_completion.bash
    │   ├── repos_completion.fish
    │   └── repos_completion.zsh
    └── share
        └── man
            └── man1
                └── repos.1.gz
#+end_example
** Prebuilt distribution

Download the latest version built by CI:
[[https://gitlab.com/philippecarphin/repos/-/jobs/artifacts/master/download?job=build]]
In the bin directory, you will have to rename the right file for your OS and
architecture to be =repos=.

It has binaries for
- MacOS arm64
- MacOS amd64
- Linux arm64
- Linux amd64
- Windows x86_64
  
Add the =bin= directory to your PATH and source one of the completion scripts in
=completions= in the setup script of your shell.

* Using

List your repos in =~/.config/repos.yml= like so:
#+begin_src yaml
repos:
  RepoName:
    path: "/path/to/git/repo"
  MyOtherRepoName:
    path: "/path/to/other/git/repo"
config:
  color: true
  defaults:
    # Default values for repo
#+end_src

then run =repos=.

If you source the shell completion script, you will also have a shell function
=rcd REPO= which will =cd= to the directory of the repository.

This function has autocompletion of repo names so pressing =<TAB><TAB>= lists
your repos.


#+begin_src shell :results output
repos -h 2>&1
#+end_src

#+begin_example
Usage of repos:
  -generate-config
    	Look for git repos in PWD and generate ~/.config/repos.yml file content on STDOUT.
  -get-dir string
    	Print directory associated repo
  -j int
    	Number of concurrent repos to do (default 1)
  -list-names
    	Output list of names on a single line for autocomplete
  -no-fetch
    	Disable auto-fetching
#+end_example

