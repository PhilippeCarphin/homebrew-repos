#+TITLE: Repos
* NAME
repos - a command line tool keep track of local git repos.
* SYNOPSIS

#+begin_src shell
repos [-no-fetch] [-j NJOBS]
repos -get-dir REPO
rcd REPO-NAME/SUBDIR
#+end_src

* DESCRIPTION

Without any arguments, the ~repos~ looks in ~$HOME/.config/repos.yml~ and prints
a report of on various information about the git repo:

#+begin_src
REPO                       REMOTE STATE     STAGED            UNSTAGED     UNTRACKED     TSLC         COMMENT
my-first-extension              unknown                   ( 3f, +25 ,-2  )     0           14360 Hours
stow-completion                  behind                                        0           4134 Hours
orgmanpages                  Up to Date  ( 3f, +162,-0  ) ( 1f, +16 ,-1  )     1d,4f       15800 Hours
utils                            behind                   ( 1f, +16 ,-1  )     0           626  Hours
#+end_src

- Remote state of the currently checked out branch: up-to-date, behind, ahead, diverged
- Staged and unstaged changes: (#files, #added-lines, #removed-lines)
- Untracked files: (#directories, #files)
- Time since last commit: The time in hours since the last commit was made on
  the currently checked out branch.

By default, the repositories whose that are up to date with the remote, have no
staged or unstaged changes, and have no untracked files or directories are
not shown (see CONFIGURATION and the =-no-ignore= and =-all= options).

The report is colored so as to attract attention to the repos that likely
need it most:
- Untracked files in bold red: Untracked files are never good, they should either
  be in the gitignore or not be there.
- Staged changes in bold yellow: if a repo has staged changes, it is likely the
  user was in the middle of making a commit and should go complete it.
- Unstaged changes in yellow: It's normal to have unstaged changes if you are
  working on something.
- Remote state in bold purple: It depends, but it's also easy to solve so you
  might as well push or merge.

See section OPTIONS for more available options for ~repos~.

* CONFIGURATION

The ~$HOME/.config/repos.yml~ file should look like

#+begin_src yaml
repos:
  a-repo:
    path: "/path/to/a-repo"
  b-repo:
    path: "/path/to/b-repo"
#+end_src

See =man repos-find= for a tool on how to generate this configuration file.

Each individual item under the toplevel key =repos= must have a =path= and
may have the following attributes:

- =ignore: [true|false]=: Don't show repos if the only thing that needs
  attention is that they are behind the remote.  This is useful actively
  developed open-source repos that we have no intention of working on.

Run =repos ignore --name NAME= to add this flag to a repo or =repos ignore=
while inside that repo.

* OPTIONS

** ~-j NJOBS~

Use up to ~NJOBS~ concurrent processes to assess the status of the git
repositories.  Because =git fetch=, which is mostly IO, is run for each
repo, an important speed increase is gained by having a high number of jobs.

** ~-no-ignore~

Disregard the ignore attribute for repos.

** ~-all~

Show all repos even if they have nothing that requires attention.

** ~-no-fetch~

Skips the fetching step.  This is useful if you have separate repos config file
that has repos of other people on a shared filesystem for which running git fetch
would cause permission denied errors.


** ~-recent~

Run ~git recent~ in all repositories.  Showing commits made *today* and
*yesterday*.  This is very useful if you work on many repos and want to get a
condensed report of recent activity.  See =man git-recent= for more info.

** ~-days~

Only useful with the ~-recent~ flag.  Go more than one day before yesterday in
the commit history.

** ~-generate-config~

Use =repos find= instead.  It is much more powerful.

* BUGS

The accompanying script =repos_completion.bash= defines autocomplete and the
~rcd~ that takes a repo name.  It uses the ~repos~ executable.  If there is no
~$HOME/.config/repos.yml~, the ~rcd~ shell function will not work.

* SEE ALSO

rcd, repo-finder

* AUTHOR
Philippe Carphin
