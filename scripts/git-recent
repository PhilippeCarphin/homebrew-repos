#!/usr/bin/env python3
import os
import sys
import datetime
import subprocess
import pprint
import argparse


class Repo:
    def __init__(self, repo_dir):
        self.repo_dir = repo_dir
        self.commits = list(get_commits_gen(repo_dir))

    def commits_between_dates(self, begin, end):
        for c in self.commits:
            date = datetime.date.fromtimestamp(int(c["date"].timestamp()))
            if begin < date and date <= end:
                yield c
    def organize_by_day(self):
        """Getting today's commits and yesterday's commits in two different
        lists is done by going over the whole list of commits twice.  If this
        becomes a problem, I can organize the commits by day in a single pass
        then get the commits for today and yesterday."""
        pass
    def print_recent_commits(self, days=1):
        now = datetime.date.today()
        yesterday = now - datetime.timedelta(days=1)
        before_yesterday = now - datetime.timedelta(days=1+days)

        today = list(self.commits_between_dates(yesterday, now))
        yesterday = list(self.commits_between_dates(before_yesterday, yesterday))

        if today or yesterday:
            print(f"\033[1;4;35mCommits made today on {self.repo_dir}\033[0m")
        else:
            if days != 1:
                print(f"No commits between today and {days} days ago for {self.repo_dir}")
            else:
                print(f"No commits today or yesterday for {self.repo_dir}")
        if today:
            print(f"\033[1;4;32mToday's commits\033[0m")
            for c in sorted(today, key=lambda c: c["date"], reverse=True):
                print(f"\033[33m{c['hash'][:6]}\033[0m {c['date']} - \033[32m{c['message']}\033[0m")
        if yesterday:
            past_header = "Yesterday's commits"
            if days != 1:
                past_header = f"Commits between yesterday and {days} days ago"
            print(f"\033[1;4;32m{past_header}\033[0m")
            for c in sorted(yesterday, key=lambda c: c["date"], reverse=True):
                print(f"\033[33m{c['hash'][:6]}\033[0m {c['date']} - \033[32m{c['message']}\033[0m")


def get_commits_gen(repo_dir):
    result = subprocess.run(
        f'cd {repo_dir} && git log --date=unix --pretty=format:"%ad %H %s"',
        shell=True, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        check=True
    )
    for l in result.stdout.splitlines():
        words = l.split()
        yield {
            "date": datetime.datetime.fromtimestamp(int(words[0])),
            "hash": words[1],
            "message": ' '.join(words[2:]),
        }

def main():
    p = argparse.ArgumentParser(description="Print today and yesterday's commits for a git repo")
    p.add_argument("--days", "-d", default=1, help="Number of days to go before yesterday")
    args = p.parse_args()
    repo_dir = os.getcwd()
    repo = Repo(repo_dir)
    repo.print_recent_commits(days=int(args.days))

if __name__ == "__main__":
    try:
        sys.exit(main())
    except subprocess.CalledProcessError as e:
        print(e.stderr.strip())
        sys.exit(e.returncode)



